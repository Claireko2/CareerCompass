# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseCompany(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Company']] = 'Company'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CompanyActions[_PrismaModelT]':
        from .client import get_client

        return actions.CompanyActions[_PrismaModelT](client or get_client(), cls)


class BaseLocation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Location']] = 'Location'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.LocationActions[_PrismaModelT]':
        from .client import get_client

        return actions.LocationActions[_PrismaModelT](client or get_client(), cls)


class BaseJobPosting(_PrismaModel):
    __prisma_model__: ClassVar[Literal['JobPosting']] = 'JobPosting'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.JobPostingActions[_PrismaModelT]':
        from .client import get_client

        return actions.JobPostingActions[_PrismaModelT](client or get_client(), cls)


class BaseSkill(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Skill']] = 'Skill'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SkillActions[_PrismaModelT]':
        from .client import get_client

        return actions.SkillActions[_PrismaModelT](client or get_client(), cls)


class BaseJobSkill(_PrismaModel):
    __prisma_model__: ClassVar[Literal['JobSkill']] = 'JobSkill'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.JobSkillActions[_PrismaModelT]':
        from .client import get_client

        return actions.JobSkillActions[_PrismaModelT](client or get_client(), cls)


class BaseOccupation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Occupation']] = 'Occupation'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OccupationActions[_PrismaModelT]':
        from .client import get_client

        return actions.OccupationActions[_PrismaModelT](client or get_client(), cls)


class BaseOccupationSkill(_PrismaModel):
    __prisma_model__: ClassVar[Literal['OccupationSkill']] = 'OccupationSkill'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OccupationSkillActions[_PrismaModelT]':
        from .client import get_client

        return actions.OccupationSkillActions[_PrismaModelT](client or get_client(), cls)


class BaseResume(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Resume']] = 'Resume'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ResumeActions[_PrismaModelT]':
        from .client import get_client

        return actions.ResumeActions[_PrismaModelT](client or get_client(), cls)


class BaseResumeSkill(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ResumeSkill']] = 'ResumeSkill'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ResumeSkillActions[_PrismaModelT]':
        from .client import get_client

        return actions.ResumeSkillActions[_PrismaModelT](client or get_client(), cls)


