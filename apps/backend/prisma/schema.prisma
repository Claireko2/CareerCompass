generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String       @unique
  website   String?
  createdAt DateTime     @default(now())
  jobs      JobPosting[]
}

model Location {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  city      String?
  region    String?
  country   String
  latitude  Float?
  longitude Float?
  jobs      JobPosting[]

  @@unique([city, region, country])
  @@index([city, region, country])
}

model JobPosting {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jobId            String        @unique
  title            String
  description      String
  postedAt         DateTime?
  scrapedAt        DateTime      @default(now())
  url              String
  updatedAt        DateTime      @updatedAt
  companyId        String        @db.Uuid
  locationId       String        @db.Uuid
  benefits         Json?
  qualifications   Json?
  responsibilities Json?
  applications     Application[]
  company          Company       @relation(fields: [companyId], references: [id])
  location         Location      @relation(fields: [locationId], references: [id])
  skills           JobSkill[]

  @@index([companyId])
  @@index([locationId])
}

model Skill {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label            String
  altLabels        Json?             @map("alt_labels")
  skill_type       String?
  status           String?
  modified_at      DateTime?         @db.Timestamp(6)
  description      String?
  skillsInJobs     JobSkill[]
  occupationSkills OccupationSkill[]

  @@map("esco_skills")
}

model JobSkill {
  jobId   String     @db.Uuid
  skillId String     @db.Uuid
  job     JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill   Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobId, skillId])
  @@index([skillId])
}

model Occupation {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  source      String
  skills      OccupationSkill[]
}

model OccupationSkill {
  occupationId String     @db.Uuid
  skillId      String     @db.Uuid
  relationType String?
  skillType    String?
  occupation   Occupation @relation(fields: [occupationId], references: [id], onDelete: Cascade)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([occupationId, skillId])
}

model Resume {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String?
  phone        String?
  rawText      String
  createdAt    DateTime      @default(now())
  applications Application[]
  skills       ResumeSkill[]
}

model ResumeSkill {
  id               String  @id @default(uuid())
  resumeId         String  @db.Uuid
  skillName        String
  canonicalSkillId String?
  source           String
  resume           Resume  @relation(fields: [resumeId], references: [id])
}

model Application {
  id           String     @id @default(uuid())
  resumeId     String     @db.Uuid
  jobPostingId String     @db.Uuid
  appliedDate  DateTime?
  status       String     @default("Not Applied")
  note         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  resume       Resume     @relation(fields: [resumeId], references: [id])
}
